using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// This file is set as Ignore is the project
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

namespace Knightrunner.Library.Database.Schema.Linq
{
    public class LinqCodeGenerator : ICodeGenerator
    {
        public DatabaseSchema DatabaseSchema { get; set; }
        public ScriptCasing IdentifierCasing { get; set; }
        public DbFlavor DbFlavor { get; set; }

        public string DirectoryPath { get; set; }
        public string RootNamespace { get; set; }

        public void Generate()
        {
            // TODO: Validate

            foreach (Table table in DatabaseSchema.Tables.Values)
            {
                GenerateClass(table);
            }
        }

        private void GenerateClass(Table table)
        {
            string fileName = Path.Combine(DirectoryPath, GetFileName(table));
            using (IndentedStreamWriter writer = new IndentedStreamWriter(fileName))
            {
                WriteHeader(writer, table);
                writer.WriteLine("namespace " + RootNamespace);
                writer.WriteLine("{");
                writer.Indent();
                WriteUsings(writer);
                WriteClass(writer, table);
                writer.Unindent();
                writer.WriteLine("}");
            }
        }

        private void WriteHeader(IndentedStreamWriter writer, Table table)
        {
            writer.WriteLine("//------------------------------------------------------------------------------");
            writer.WriteLine("// <auto-generated>");
            writer.WriteLine("//     This code was generated by a tool.");
            writer.WriteLine("//     Runtime Version:" + typeof(int).Assembly.GetName().Version.ToString());
            writer.WriteLine("//");
            writer.WriteLine("//     Changes to this file may cause incorrect behavior and will be lost if");
            writer.WriteLine("//     the code is regenerated.");
            writer.WriteLine("// </auto-generated>");
            writer.WriteLine("//------------------------------------------------------------------------------");
            writer.WriteLine();
        }

        private void WriteUsings(IndentedStreamWriter writer)
        {
            writer.WriteLine("using System.Data.Linq;");
            writer.WriteLine("using System.Data.Linq.Mapping;");
            writer.WriteLine("using System.Data;");
            writer.WriteLine("using System.Collections.Generic;");
            writer.WriteLine("using System.Reflection;");
            writer.WriteLine("using System.Linq;");
            writer.WriteLine("using System.Linq.Expressions;");
            writer.WriteLine("using System.ComponentModel;");
            writer.WriteLine("using System;");
            writer.WriteLine();
        }

        private string GetFileName(Table table)
        {
            return table.Name + ".cs";
        }


        private void WriteClass(IndentedStreamWriter writer, Table table)
        {
            writer.WriteLine("[global::System.Data.Linq.Mapping.TableAttribute(Name=\"" + table.Name + "\")]");
            writer.WriteLine("public partial class " + GetClassName(table));
            writer.WriteLine("{");
            writer.Indent();
            foreach (Column column in table.Columns)
            {
                WriteProperty(writer, table, column);
            }
            writer.Unindent();
            writer.WriteLine("}");

        }

        private void WriteProperty(IndentedStreamWriter writer, Table table, Column column)
        {
            //writer.Write("[global::System.Data.Linq.Mapping.ColumnAttribute(DbType=\"");
            //IScriptGenerator.
            //Int NOT NULL", IsPrimaryKey=true)]
            //string dataType = column.ColumnType.DataType.FullName;
            //if (column.CanBeNull && column.ColumnType.DataType != typeof(string))
            //{
            //    dataType += "?";
            //}
            //writer.WriteLine("public " + dataType + " " + column.Name + " { get; set; }");
        }

        private string GetClassName(Table table)
        {
            return table.Name;
        }


    }
}
