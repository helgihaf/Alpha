using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Knightrunner.Library.Core;
using System.Diagnostics;

namespace Knightrunner.Library.Cryptography.Tests
{
    [TestClass]
    public class AsymmetricTest
    {

        private readonly byte[] mainPublicKey = new byte[]
        {
            0x6, 0x2, 0x0, 0x0, 0x0, 0xA4, 0x0, 
            0x0, 0x52, 0x53, 0x41, 0x31, 0x0, 0x4, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x55, 0x7E, 0xB6, 
            0x2D, 0x7, 0x2D, 0xC9, 0x65, 0xCE, 0xAE, 0x7F, 0xBA, 0xE1, 0x4F, 0xD3, 0xAD, 0x15, 
            0x29, 0x9C, 0x31, 0x70, 0x8D, 0xF5, 0x17, 0x93, 0xE6, 0xAC, 0xAA, 0x29, 0x5E, 0x7A,
            0xC9, 0x3B, 0x70, 0xBE, 0x2, 0x22, 0x1, 0xFF, 0x7B, 0x63, 0x79, 0x12, 0xB2, 0xFB, 
            0x5F, 0xD4, 0x40, 0xDE, 0x4A, 0x6A, 0x19, 0x44, 0x2A, 0x59, 0xD6, 0xD8, 0xF, 0x66, 
            0xD9, 0xFF, 0xF3, 0x83, 0x80, 0x7A, 0x31, 0x85, 0x81, 0xE4, 0xEB, 0x4, 0x61, 0x41, 
            0xDB, 0x38, 0xF4, 0xB6, 0x58, 0x2, 0x32, 0xE6, 0xF2, 0x5D, 0x4A, 0xD9, 0xD1, 0x93, 
            0xC2, 0x8, 0xDB, 0x1E, 0x6D, 0x15, 0x5C, 0xD2, 0x3A, 0x97, 0x35, 0xAE, 0x5B, 0x6F, 
            0x40, 0xE8, 0x89, 0xF5, 0x6D, 0x5D, 0xCE, 0x7D, 0x3E, 0x55, 0x27, 0x57, 0xD0, 0x35, 
            0x96, 0x7D, 0x30, 0x56, 0xE9, 0x1B, 0xE6, 0x9C, 0x27, 0x4C, 0x3C, 0xBB, 0x98
        };
        private readonly byte[] mainPrivateKey = new byte[]
        { 
            0x7, 0x2, 0x0, 0x0, 0x0, 0xA4, 
            0x0, 0x0, 0x52, 0x53, 0x41, 0x32, 0x0, 0x4, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x55, 0x7E, 
            0xB6, 0x2D, 0x7, 0x2D, 0xC9, 0x65, 0xCE, 0xAE, 0x7F, 0xBA, 0xE1, 0x4F, 0xD3, 0xAD, 0x15, 
            0x29, 0x9C, 0x31, 0x70, 0x8D, 0xF5, 0x17, 0x93, 0xE6, 0xAC, 0xAA, 0x29, 0x5E, 0x7A, 
            0xC9, 0x3B, 0x70, 0xBE, 0x2, 0x22, 0x1, 0xFF, 0x7B, 0x63, 0x79, 0x12, 0xB2, 0xFB, 0x5F, 
            0xD4, 0x40, 0xDE, 0x4A, 0x6A, 0x19, 0x44, 0x2A, 0x59, 0xD6, 0xD8, 0xF, 0x66, 0xD9, 
            0xFF, 0xF3, 0x83, 0x80, 0x7A, 0x31, 0x85, 0x81, 0xE4, 0xEB, 0x4, 0x61, 0x41, 0xDB, 
            0x38, 0xF4, 0xB6, 0x58, 0x2, 0x32, 0xE6, 0xF2, 0x5D, 0x4A, 0xD9, 0xD1, 0x93, 0xC2, 
            0x8, 0xDB, 0x1E, 0x6D, 0x15, 0x5C, 0xD2, 0x3A, 0x97, 0x35, 0xAE, 0x5B, 0x6F, 0x40, 
            0xE8, 0x89, 0xF5, 0x6D, 0x5D, 0xCE, 0x7D, 0x3E, 0x55, 0x27, 0x57, 0xD0, 0x35, 0x96, 
            0x7D, 0x30, 0x56, 0xE9, 0x1B, 0xE6, 0x9C, 0x27, 0x4C, 0x3C, 0xBB, 0x98, 0x85, 0xD3, 
            0x76, 0x72, 0x77, 0xCE, 0x67, 0xF9, 0x94, 0x88, 0x5D, 0x2, 0x3B, 0x26, 0x86, 0x39, 0x1F, 
            0x18, 0x5, 0x22, 0x30, 0xD2, 0x8A, 0x57, 0xC7, 0x70, 0xB3, 0xBE, 0xB1, 0x46, 0x5E, 0x77, 
            0x18, 0xC, 0x8A, 0x25, 0x45, 0x70, 0xC2, 0x9B, 0x8D, 0x4F, 0xF6, 0x34, 0xFE, 0xC, 0x64, 
            0x2B, 0x4C, 0x3A, 0x5F, 0x25, 0xEB, 0xD3, 0xD4, 0xBE, 0x49, 0x99, 0x3E, 0x24, 0xB5, 0x35, 
            0xC8, 0xCF, 0x91, 0xF0, 0x6C, 0xBE, 0xCA, 0xC6, 0xA5, 0xCD, 0xC4, 0x25, 0xF2, 0x7D, 0x6, 
            0x9B, 0xA, 0x9B, 0x6B, 0xD3, 0x1, 0xFA, 0x35, 0x11, 0xB4, 0x31, 0x4F, 0xFF, 0x84, 0xFB, 
            0x14, 0x58, 0x75, 0x2F, 0xD0, 0x8C, 0xAC, 0x8E, 0x17, 0x8C, 0x6, 0xAB, 0x5F, 0xB6, 
            0x7F, 0x0, 0x4A, 0x3B, 0xA4, 0x4, 0xA0, 0x93, 0x38, 0xFE, 0x5D, 0xCA, 0x7A, 0x2B, 0x5B, 
            0x73, 0xF9, 0xA8, 0xC9, 0x9B, 0x2C, 0xBC, 0xC5, 0xC4, 0x14, 0xA2, 0xB4, 0x79, 0x8A, 0x30, 
            0x42, 0x2E, 0x95, 0x72, 0x5C, 0x5A, 0xD2, 0xC1, 0x55, 0xE1, 0x74, 0xC7, 0x76, 0xFA, 0x6F, 
            0x1E, 0xC2, 0x1E, 0x64, 0xA6, 0x19, 0x85, 0xA9, 0xD7, 0xC8, 0x7E, 0x84, 0x9, 0x6F, 0xEE,
            0xF8, 0x31, 0x82, 0xD, 0xDF, 0x64, 0x74, 0xFE, 0xAF, 0xE0, 0x1B, 0xC3, 0xA, 0x92, 
            0x45, 0x71, 0xB5, 0x73, 0x0, 0xEA, 0x1A, 0xB5, 0x9, 0x5A, 0xEB, 0xC7, 0xA1, 0x60, 0xB3,
            0xB, 0x45, 0x7B, 0x1A, 0x3B, 0xAC, 0x4A, 0x4D, 0x5D, 0x42, 0xCB, 0x44, 0x31, 0x40, 0xBF,
            0xB7, 0x97, 0xF0, 0x7C, 0xDB, 0x2D, 0x4B, 0x4A, 0x32, 0x57, 0x64, 0x1F, 0x15, 0xB9, 
            0x34, 0xBA, 0xCC, 0x3, 0x2E, 0xA0, 0x8B, 0x35, 0x21, 0xD, 0x5B, 0xCB, 0xDF, 0x6F, 0x74, 
            0x4C, 0x1D, 0xEA, 0xF2, 0x47, 0xB1, 0xF3, 0x43, 0xE, 0xD0, 0xD6, 0xF2, 0x5A, 0xD5, 0x6B, 
            0x1B, 0xAF, 0x7F, 0xC4, 0xA9, 0xFA, 0xB6, 0x73, 0xE9, 0xDC, 0x10, 0x6A, 0x24, 0x9E, 
            0xE, 0x2B, 0x87, 0xE, 0xF, 0xA, 0xE4, 0xC7, 0xD1, 0x1B, 0x11, 0xE8, 0x83, 0xC2, 0x10, 
            0x7D, 0x83, 0x3, 0xA6, 0xC0, 0xD4, 0x41, 0x2B, 0x3D, 0x63, 0xC2, 0x9A, 0x3A, 0xDA, 0x25, 
            0x2B, 0x78, 0x1F, 0xE7, 0xCF, 0x9D, 0x2B, 0x81, 0x6B, 0xB, 0x93, 0xCE, 0xF7, 0x20, 0xAC, 
            0x5E, 0x63, 0x3D, 0x83, 0x54, 0x97, 0xB9, 0x41, 0xC9, 0x2B, 0x1A, 0x67, 0xD0, 0x1C, 0xC6, 
            0x92, 0xBA, 0x38, 0x1, 0x8F, 0x4C, 0x53, 0x41, 0x46, 0x59, 0xA4, 0xE0, 0xEC, 0xCA, 0x9B, 
            0x1D, 0x6A, 0x7B, 0xB1, 0x15, 0x93, 0x6E, 0xE5, 0xC0, 0xF1, 0x14, 0x8C, 0xD6, 0x22, 0x6D, 
            0x39, 0xB6, 0x64, 0x50, 0xDF, 0x7C, 0x6D, 0x32, 0x47, 0xC0, 0xD0, 0x39, 0x82, 0x6E, 0x30, 
            0x79, 0x69, 0xC0, 0xD0, 0x93, 0x68, 0xE2, 0x82, 0xB8, 0x2, 0x3A, 0x78, 0xFA, 0x29, 0xE4, 
            0x49, 0x45, 0x40, 0x54, 0xFC, 0x6, 0x64, 0x39, 0x59, 0x4B, 0xFC, 0xB5, 0xCE, 0xD1, 0xF, 
            0xC7, 0x9E, 0x23, 0xEF, 0x51, 0xA4, 0x9C, 0x1D, 0xB2, 0xA1, 0x89, 0xE8, 0x95, 0x99, 0xD3, 
            0xA8, 0x6B, 0x19, 0x34, 0xBD, 0x4B, 0xF8, 0x74, 0x97, 0xAF, 0x3C, 0x8C, 0x2C, 0x1, 0xCB, 
            0xF0, 0x6D, 0xC6, 0x56, 0x33, 0xF3, 0x91, 0x70, 0xE2, 0xC7, 0xE3, 0xE8, 0xA8, 0xD5, 0x77
        };

        [TestMethod]
        public void AsymmetricEncryptDataTest()
        {
            Asymmetric asymmetric = new Asymmetric();

            // Short data test
            byte[] data = new byte[] { 7, 12, 69, 47, 249 };

            byte[] encrypted = asymmetric.EncryptData(data, mainPublicKey);
            byte[] actual = asymmetric.DecryptData(encrypted, mainPrivateKey);
            AssertBytesAreEqual(data, actual);

            // Longer data test
            string msg =
                "Implementing the IDisposable interface can be the source of great " +
                "confusion amongst many programmers. Whenever possible, I use the following " +
                "pattern when implementing it. So far it covers most of the cases I have needed " +
                "but for a more extensive discussion see this excellent article by Scott Dorman: " +
                "www.codeproject.com/KB/cs/idisposable.aspx";
            data = Encoding.Unicode.GetBytes(msg);
            encrypted = asymmetric.EncryptData(data, mainPublicKey);
            actual = asymmetric.DecryptData(encrypted, mainPrivateKey);
            AssertBytesAreEqual(data, actual);

            // Null argument
            data = null;
            try
            {
                encrypted = asymmetric.EncryptData(data, mainPublicKey);
                Assert.Fail("Expected exception");
            }
            catch (ArgumentNullException)
            {
            }

            // Zero data length
            data = new byte[0];
            encrypted = asymmetric.EncryptData(data, mainPublicKey);
            actual = asymmetric.DecryptData(encrypted, mainPrivateKey);
            AssertBytesAreEqual(data, actual);

            // Single byte
            data = new byte[] { 7 };
            encrypted = asymmetric.EncryptData(data, mainPublicKey);
            actual = asymmetric.DecryptData(encrypted, mainPrivateKey);
            AssertBytesAreEqual(data, actual);

            // Long data test
            data = new byte[2 * 1024 * 1024];
            Random random = new Random(71269);
            random.NextBytes(data);
            encrypted = asymmetric.EncryptData(data, mainPublicKey);
            actual = asymmetric.DecryptData(encrypted, mainPrivateKey);
            AssertBytesAreEqual(data, actual);
        }


        private void AssertBytesAreEqual(byte[] expected, byte[] actual)
        {
            if (expected != null && actual != null)
            {
                Assert.AreEqual(expected.Length, actual.Length);
                for (int i = 0; i < expected.Length; i++)
                {
                    Assert.AreEqual(expected[i], actual[i]);
                }
            }
            else
            {
                Assert.AreEqual(expected == null, actual == null);
            }
        }

    }
}
