using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace Knightrunner.Library.Database.Schema.SqlServer
{
    public class SqlServerScriptGenerator : IScriptGenerator
    {
        public DataSchema DataSchema { get; set; }
        public string DatabaseSchemaName { get; set; }
        public ScriptCasing IdentifierCasing { get; set; }
        public TargetSystem TargetSystem  { get; set; }
        public string DirectoryPath { get; set; }
        public string FileName { get; set; }
        public IScriptDocumentGenerator ScriptDocumentGenerator { get; set; }

        private SqlServerColumnTypeMapper columnTypeMapper = new SqlServerColumnTypeMapper();
        private string effectiveDatabaseSchemaName;

        public void Generate(Stream outStream)
        {
            if (outStream == null)
                throw new ArgumentNullException("outStream");

            if (DataSchema == null)
                throw new InvalidOperationException("DatabaseSchema property has not been set");

            if (TargetSystem == null)
                throw new InvalidOperationException("TargetSystem property has not been set");

            effectiveDatabaseSchemaName = DatabaseSchemaName;
            if (string.IsNullOrWhiteSpace(effectiveDatabaseSchemaName))
            {
                effectiveDatabaseSchemaName = "dbo";
            }

            Verification.VerificationContext context = new Verification.VerificationContext();
            DataSchema.Verify(context);
            if (context.HasErrors)
            {
                throw new InvalidOperationException("The DataSchema has verification errors");
            }

            using (StreamWriter writer = new StreamWriter(outStream))
            {
                WriteHeader(writer);

                foreach (Table table in DataSchema.Tables)
                {
                    if (table.Settings.GetValueAsBool(TargetSystem.Name, "Ignore"))
                        continue;
                    WriteTable(writer, table);
                    WritePrimaryKey(writer, table);
                    WriteIndices(writer, table);
                    WriteGo(writer);
                }

                foreach (Table table in DataSchema.Tables)
                {
                    if (table.Settings.GetValueAsBool(TargetSystem.Name, "Ignore"))
                        continue;
                    WriteReferences(writer, table);
                    WriteGo(writer);
                }

            }
        }

        private void WriteHeader(StreamWriter writer)
        {
            writer.WriteLine("--");
            writer.WriteLine("-- Autogenerated SQL script for database schema " + DataSchema.Name);
            writer.WriteLine("-- Generated at " + DateTime.Now.ToString("s", System.Globalization.CultureInfo.InvariantCulture));
            writer.WriteLine("-- " + ClassAndAssemblyInfo());
            writer.WriteLine();
        }

        private string ClassAndAssemblyInfo()
        {
            return this.GetType().FullName + ", " + this.GetType().Assembly.FullName;
        }

        private void WriteTable(StreamWriter writer, Table table)
        {
            writer.WriteLine("CREATE TABLE [" + effectiveDatabaseSchemaName + "]." + Identifier(table.Name));
            writer.WriteLine("(");

            for (int i = 0; i < table.Columns.Count; i++)
            {
                Column column = table.Columns[i];
                writer.Write("\t" + Identifier(column.Name) + " ");
                writer.Write(columnTypeMapper.GetColumnTypeString(TargetSystem, column));

                if (i < table.Columns.Count - 1)
                {
                    writer.WriteLine(",");
                }
                else
                {
                    writer.WriteLine();
                }
            }
            writer.WriteLine(");");
            writer.WriteLine();

            if (ScriptDocumentGenerator != null)
            {
                ScriptDocumentGenerator.WriteDocumentation(DatabaseSchemaName, writer, table);
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Globalization", "CA1308:NormalizeStringsToUppercase")]
        private string Identifier(string identifier)
        {
            string temp;

            switch (IdentifierCasing)
            {
                case ScriptCasing.Preserve:
                    temp = identifier;
                    break;
                case ScriptCasing.Lowercase:
                    temp = identifier.ToLowerInvariant();
                    break;
                case ScriptCasing.Uppercase:
                    temp = identifier.ToUpperInvariant();
                    break;
                default:
                    throw new NotImplementedException("Implementation missing for ScriptCasing." + IdentifierCasing.ToString());
            }

            return "[" + temp + "]";
        }


        private void WritePrimaryKey(StreamWriter writer, Table table)
        {
            if (!table.HasPrimaryKey)
                return;

            writer.Write("ALTER TABLE [" + effectiveDatabaseSchemaName + "]." + Identifier(table.Name));
            writer.WriteLine(" ADD CONSTRAINT " + Identifier(table.PrimaryKeyName) + " PRIMARY KEY CLUSTERED");
            writer.Write("(");
            bool hasColumns = false;
            foreach (Column column in table.Columns)
            {
                if (column.InPrimaryKey)
                {
                    if (hasColumns)
                    {
                        writer.Write(", ");
                    }
                    writer.Write(Identifier(column.Name));
                    hasColumns = true;
                }
            }
            writer.WriteLine(");");
            writer.WriteLine();
        }


        private void WriteIndices(StreamWriter writer, Table table)
        {
            foreach (Index index in table.Indices)
            {
                WriteIndex(writer, index);
            }
        }

        private void WriteIndex(StreamWriter writer, Index index)
        {
            writer.Write("CREATE");
            if (index.IsUnique)
            {
                writer.Write(" UNIQUE");
            }
            writer.Write(" INDEX " + Identifier(index.Name) + " ON");
            writer.WriteLine(" [" + effectiveDatabaseSchemaName + "]." + Identifier(index.Table.Name));
            writer.Write("(");
            bool hasColumns = false;
            foreach (Column column in index.Columns)
            {
                if (hasColumns)
                {
                    writer.Write(", ");
                }
                writer.Write(Identifier(column.Name));
                hasColumns = true;
            }
            writer.WriteLine(");");
            writer.WriteLine();
        }

    
        //private void WriteReferences(StreamWriter writer, Table table)
        //{
        //    foreach (Column column in table.Columns)
        //    {
        //        if (column.ReferencesTable != null)
        //        {
        //            writer.Write("ALTER TABLE [" + TableSchemaName + "]." + Identifier(table.Name) + " WITH CHECK");
        //            writer.WriteLine(" ADD CONSTRAINT " + Identifier(table.ForeignKeyName(column)) + " FOREIGN KEY");
        //            writer.Write("(");
        //            writer.Write(Identifier(column.Name));
        //            writer.Write(") REFERENCES [" + TableSchemaName + "]." + Identifier(column.ReferencesTable.Name));
        //            writer.WriteLine(" (" + Identifier(column.ReferencesColumn.Name) + ");");
        //            writer.WriteLine();
        //        }
        //    }
        //}

        private void WriteReferences(StreamWriter writer, Table table)
        {
            foreach (ForeignKey foreignKey in table.ForeignKeys)
            {
                writer.Write("ALTER TABLE [" + effectiveDatabaseSchemaName + "]." + Identifier(table.Name) + " WITH CHECK");
                writer.WriteLine(" ADD CONSTRAINT " + Identifier(table.ForeignKeyName(foreignKey)) + " FOREIGN KEY");
                writer.Write("(");

                for (int i = 0; i < foreignKey.Columns.Count; i++)
                {
                    if (i > 0)
                    {
                        writer.Write(", ");
                    }
                    writer.Write(Identifier(foreignKey.Columns[i].FromColumn.Name));
                }
                writer.Write(") REFERENCES [" + effectiveDatabaseSchemaName + "]." + Identifier(foreignKey.ToTable.Name));
                writer.Write(" (");

                for (int i = 0; i < foreignKey.Columns.Count; i++)
                {
                    if (i > 0)
                    {
                        writer.Write(", ");
                    }
                    writer.Write(Identifier(foreignKey.Columns[i].ToColumn.Name));
                }
                    
                writer.WriteLine(");");
            }
        }


        private void WriteGo(StreamWriter writer)
        {
            writer.WriteLine("GO");
            writer.WriteLine();
        }


        internal static string StringToScript(string s)
        {
            return s.Replace("'", "''");
        }


    }
}
