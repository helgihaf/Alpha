#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Knightrunner.Library.Images.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Images")]
	public partial class ImagesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertImage(Image instance);
    partial void UpdateImage(Image instance);
    partial void DeleteImage(Image instance);
    partial void InsertTag(Tag instance);
    partial void UpdateTag(Tag instance);
    partial void DeleteTag(Tag instance);
    partial void InsertImageTag(ImageTag instance);
    partial void UpdateImageTag(ImageTag instance);
    partial void DeleteImageTag(ImageTag instance);
    #endregion
		
		public ImagesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ImagesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ImagesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ImagesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Image> Images
		{
			get
			{
				return this.GetTable<Image>();
			}
		}
		
		public System.Data.Linq.Table<Tag> Tags
		{
			get
			{
				return this.GetTable<Tag>();
			}
		}
		
		public System.Data.Linq.Table<ImageTag> ImageTags
		{
			get
			{
				return this.GetTable<ImageTag>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Images")]
	public partial class Image : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Computer;
		
		private string _FilePath;
		
		private long _FileSize;
		
		private System.DateTime _CreationTime;
		
		private System.DateTime _ModifiedTime;
		
		private string _CameraMake;
		
		private System.Nullable<System.DateTime> _TakenTime;
		
		private byte[] _ImageHash;
		
		private string _Description;
		
		private EntitySet<ImageTag> _ImageTags;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnComputerChanging(string value);
    partial void OnComputerChanged();
    partial void OnFilePathChanging(string value);
    partial void OnFilePathChanged();
    partial void OnFileSizeChanging(long value);
    partial void OnFileSizeChanged();
    partial void OnCreationTimeChanging(System.DateTime value);
    partial void OnCreationTimeChanged();
    partial void OnModifiedTimeChanging(System.DateTime value);
    partial void OnModifiedTimeChanged();
    partial void OnCameraMakeChanging(string value);
    partial void OnCameraMakeChanged();
    partial void OnTakenTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnTakenTimeChanged();
    partial void OnImageHashChanging(byte[] value);
    partial void OnImageHashChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Image()
		{
			this._ImageTags = new EntitySet<ImageTag>(new Action<ImageTag>(this.attach_ImageTags), new Action<ImageTag>(this.detach_ImageTags));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int IDENTITY NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Computer", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Computer
		{
			get
			{
				return this._Computer;
			}
			set
			{
				if ((this._Computer != value))
				{
					this.OnComputerChanging(value);
					this.SendPropertyChanging();
					this._Computer = value;
					this.SendPropertyChanged("Computer");
					this.OnComputerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FilePath", DbType="NVarChar(260)")]
		public string FilePath
		{
			get
			{
				return this._FilePath;
			}
			set
			{
				if ((this._FilePath != value))
				{
					this.OnFilePathChanging(value);
					this.SendPropertyChanging();
					this._FilePath = value;
					this.SendPropertyChanged("FilePath");
					this.OnFilePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileSize", DbType="Bigint NOT NULL")]
		public long FileSize
		{
			get
			{
				return this._FileSize;
			}
			set
			{
				if ((this._FileSize != value))
				{
					this.OnFileSizeChanging(value);
					this.SendPropertyChanging();
					this._FileSize = value;
					this.SendPropertyChanged("FileSize");
					this.OnFileSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedTime", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedTime
		{
			get
			{
				return this._ModifiedTime;
			}
			set
			{
				if ((this._ModifiedTime != value))
				{
					this.OnModifiedTimeChanging(value);
					this.SendPropertyChanging();
					this._ModifiedTime = value;
					this.SendPropertyChanged("ModifiedTime");
					this.OnModifiedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CameraMake", DbType="NVarChar(250)")]
		public string CameraMake
		{
			get
			{
				return this._CameraMake;
			}
			set
			{
				if ((this._CameraMake != value))
				{
					this.OnCameraMakeChanging(value);
					this.SendPropertyChanging();
					this._CameraMake = value;
					this.SendPropertyChanged("CameraMake");
					this.OnCameraMakeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TakenTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> TakenTime
		{
			get
			{
				return this._TakenTime;
			}
			set
			{
				if ((this._TakenTime != value))
				{
					this.OnTakenTimeChanging(value);
					this.SendPropertyChanging();
					this._TakenTime = value;
					this.SendPropertyChanged("TakenTime");
					this.OnTakenTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageHash", DbType="Binary(16)", UpdateCheck=UpdateCheck.Never)]
		public byte[] ImageHash
		{
			get
			{
				return this._ImageHash;
			}
			set
			{
				if ((this._ImageHash != value))
				{
					this.OnImageHashChanging(value);
					this.SendPropertyChanging();
					this._ImageHash = value;
					this.SendPropertyChanged("ImageHash");
					this.OnImageHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(4000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_ImageTag", Storage="_ImageTags", ThisKey="Id", OtherKey="Image")]
		public EntitySet<ImageTag> ImageTags
		{
			get
			{
				return this._ImageTags;
			}
			set
			{
				this._ImageTags.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ImageTags(ImageTag entity)
		{
			this.SendPropertyChanging();
			entity.Image1 = this;
		}
		
		private void detach_ImageTags(ImageTag entity)
		{
			this.SendPropertyChanging();
			entity.Image1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tags")]
	public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Text;
		
		private EntitySet<ImageTag> _ImageTags;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    #endregion
		
		public Tag()
		{
			this._ImageTags = new EntitySet<ImageTag>(new Action<ImageTag>(this.attach_ImageTags), new Action<ImageTag>(this.detach_ImageTags));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int IDENTITY NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_ImageTag", Storage="_ImageTags", ThisKey="Id", OtherKey="Tag")]
		public EntitySet<ImageTag> ImageTags
		{
			get
			{
				return this._ImageTags;
			}
			set
			{
				this._ImageTags.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ImageTags(ImageTag entity)
		{
			this.SendPropertyChanging();
			entity.Tag1 = this;
		}
		
		private void detach_ImageTags(ImageTag entity)
		{
			this.SendPropertyChanging();
			entity.Tag1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ImageTags")]
	public partial class ImageTag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Image;
		
		private int _Tag;
		
		private EntityRef<Image> _Image1;
		
		private EntityRef<Tag> _Tag1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnImageChanging(int value);
    partial void OnImageChanged();
    partial void OnTagChanging(int value);
    partial void OnTagChanged();
    #endregion
		
		public ImageTag()
		{
			this._Image1 = default(EntityRef<Image>);
			this._Tag1 = default(EntityRef<Tag>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					if (this._Image1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tag", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					if (this._Tag1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTagChanging(value);
					this.SendPropertyChanging();
					this._Tag = value;
					this.SendPropertyChanged("Tag");
					this.OnTagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_ImageTag", Storage="_Image1", ThisKey="Image", OtherKey="Id", IsForeignKey=true)]
		public Image Image1
		{
			get
			{
				return this._Image1.Entity;
			}
			set
			{
				Image previousValue = this._Image1.Entity;
				if (((previousValue != value) 
							|| (this._Image1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Image1.Entity = null;
						previousValue.ImageTags.Remove(this);
					}
					this._Image1.Entity = value;
					if ((value != null))
					{
						value.ImageTags.Add(this);
						this._Image = value.Id;
					}
					else
					{
						this._Image = default(int);
					}
					this.SendPropertyChanged("Image1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_ImageTag", Storage="_Tag1", ThisKey="Tag", OtherKey="Id", IsForeignKey=true)]
		public Tag Tag1
		{
			get
			{
				return this._Tag1.Entity;
			}
			set
			{
				Tag previousValue = this._Tag1.Entity;
				if (((previousValue != value) 
							|| (this._Tag1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tag1.Entity = null;
						previousValue.ImageTags.Remove(this);
					}
					this._Tag1.Entity = value;
					if ((value != null))
					{
						value.ImageTags.Add(this);
						this._Tag = value.Id;
					}
					else
					{
						this._Tag = default(int);
					}
					this.SendPropertyChanged("Tag1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
