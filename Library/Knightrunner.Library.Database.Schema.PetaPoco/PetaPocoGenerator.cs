using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Text;

namespace Knightrunner.Library.Database.Schema.PetaPoco
{
    public class PetaPocoGenerator
    {
        private const string headerText =
            @"//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Datetime:{0}
//     Runtime Version:{1}
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;";

        public bool UseTableNameAttribute { get; set; }
        public bool UsePrimaryKeyAttribute { get; set; }
        public bool UseExplicitColumnsAttribute { get; set; }
        public bool UseColumnAttribute { get; set; }
        public List<string> UsingNamespaces { get; internal set; }
        
        public string DatabaseSchemaName { get; set; }
        public string CodeNamespace { get; set; }
        public TargetSystem TargetSystem { get; set; }

        public PetaPocoGenerator()
        {
            UsingNamespaces = new List<string>();
        }

        public void Generate(Table table, TextWriter writer)
        {
            if (TargetSystem == null)
            {
                throw new InvalidOperationException("TargetSystem has not been set.");
            }

            string indent = string.Empty;

            if (CodeNamespace != null)
            {
                WriteHeader(writer);
                writer.WriteLine("namespace " + CodeNamespace);
                writer.WriteLine("{");
                indent = "\t";
            }
            if (UseTableNameAttribute)
            {
                writer.WriteLine(indent + "[TableName(\"" + DatabaseSchemaName + "." + table.Name + "\")]");
            }

            if (UsePrimaryKeyAttribute && table.HasPrimaryKey)
            {
                foreach (Column column in table.Columns)
                {
                    if (column.InPrimaryKey)
                    {
                        writer.Write(indent + "[PrimaryKey(\"" + column.Name + "\"");
                        if (column.ColumnType.IsDbGenerated)
                        {
                            writer.Write(", autoIncrement = true");
                        }
                        writer.WriteLine(")]");
                    }
                }
            }

            if (UseExplicitColumnsAttribute)
            {
                writer.WriteLine(indent + "[ExplicitColumns]");
            }

            writer.WriteLine(indent + "public partial class " + GenerateClassName(table.Name));
            writer.WriteLine(indent + "{");
            foreach (Column column in table.Columns)
            {
                GenerateColumn(column, writer, indent);
            }
            writer.WriteLine(indent + "}");
            if (CodeNamespace != null)
            {
                writer.WriteLine("}");
            }
            writer.WriteLine();
        }

        private void WriteHeader(TextWriter writer)
        {
            writer.WriteLine(string.Format(CultureInfo.InvariantCulture, headerText, DateTime.Now.ToString("s", CultureInfo.InvariantCulture), typeof(int).Assembly.GetName().Version));
            if (UsingNamespaces != null)
            {
                foreach (var usedNamespace in UsingNamespaces)
                {
                    writer.WriteLine("using {0};", usedNamespace);
                }
            }

            writer.WriteLine();
        }

        private string GenerateClassName(string tableName)
        {
            string[] names = tableName.Split('.');
            if (names.Length == 0)
            {
                throw new ArgumentException("Invalid table name");
            }

            return DatabaseIdentifierToCSharp(names[names.Length - 1]);
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Globalization", "CA1308:NormalizeStringsToUppercase")]
        public static string DatabaseIdentifierToCSharp(string databaseIdentifier)
        {
            if(string.IsNullOrEmpty(databaseIdentifier))
            {
                throw new ArgumentException("Invalid identifier");
            }

            string[] nameParts = databaseIdentifier.Split('_');
            StringBuilder sb = new StringBuilder();
            foreach(string namePart in nameParts)
            {
                if(namePart.Length >= 2)
                {
                    sb.Append(namePart[0].ToString().ToUpperInvariant() + namePart.Substring(1).ToLowerInvariant());
                }
                else
                {
                    sb.Append(namePart);
                }
            }

            return sb.ToString();
        }

        private void GenerateColumn(Column column, TextWriter writer, string indent)
        {
            indent += "\t";
            if (UseColumnAttribute)
            {
                writer.WriteLine(indent + "[Column(\"" + column.Name + "\")]");
            }
            writer.Write(indent + "public ");
            writer.Write(GenerateDataType(column));
            writer.Write(" ");
            writer.Write(GeneratePropertyName(column));
            writer.WriteLine(" { get; set; }");
        }

        private string GeneratePropertyName(Column column)
        {
            return DatabaseIdentifierToCSharp(column.Name);
        }

        private string TypeToString(Column column, Target target)
        {
            return target.DotNetType;
        }

        private string GenerateDataType(Column column)
        {
            var target = column.GetEffectiveTarget(TargetSystem);
            bool useNullableMarker = column.CanBeNull && !target.DotNetTypeNullable;
            return TypeToString(column, target) + (useNullableMarker ? "?" : string.Empty);
        }
    }
}