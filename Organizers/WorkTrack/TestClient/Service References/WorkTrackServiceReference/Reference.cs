//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestClient.WorkTrackServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Project", Namespace="http://www.knightrunner.com/WorkTrack/Model/DataContract")]
    [System.SerializableAttribute()]
    public partial class Project : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExternalCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExternalCode {
            get {
                return this.ExternalCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ExternalCodeField, value) != true)) {
                    this.ExternalCodeField = value;
                    this.RaisePropertyChanged("ExternalCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.knightrunner.com/WorkTrack/Model/ServiceContract", ConfigurationName="WorkTrackServiceReference.IWorkTrackService")]
    public interface IWorkTrackService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.knightrunner.com/WorkTrack/Model/ServiceContract/IWorkTrackService/Get" +
            "Projects", ReplyAction="http://www.knightrunner.com/WorkTrack/Model/ServiceContract/IWorkTrackService/Get" +
            "ProjectsResponse")]
        TestClient.WorkTrackServiceReference.Project[] GetProjects();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.knightrunner.com/WorkTrack/Model/ServiceContract/IWorkTrackService/Get" +
            "Project", ReplyAction="http://www.knightrunner.com/WorkTrack/Model/ServiceContract/IWorkTrackService/Get" +
            "ProjectResponse")]
        TestClient.WorkTrackServiceReference.Project GetProject(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.knightrunner.com/WorkTrack/Model/ServiceContract/IWorkTrackService/Cre" +
            "ateProject", ReplyAction="http://www.knightrunner.com/WorkTrack/Model/ServiceContract/IWorkTrackService/Cre" +
            "ateProjectResponse")]
        TestClient.WorkTrackServiceReference.Project CreateProject();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.knightrunner.com/WorkTrack/Model/ServiceContract/IWorkTrackService/Ins" +
            "ertProject", ReplyAction="http://www.knightrunner.com/WorkTrack/Model/ServiceContract/IWorkTrackService/Ins" +
            "ertProjectResponse")]
        void InsertProject(TestClient.WorkTrackServiceReference.Project project);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.knightrunner.com/WorkTrack/Model/ServiceContract/IWorkTrackService/Upd" +
            "ateProject", ReplyAction="http://www.knightrunner.com/WorkTrack/Model/ServiceContract/IWorkTrackService/Upd" +
            "ateProjectResponse")]
        void UpdateProject(TestClient.WorkTrackServiceReference.Project updatedProject, TestClient.WorkTrackServiceReference.Project originalProject);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWorkTrackServiceChannel : TestClient.WorkTrackServiceReference.IWorkTrackService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WorkTrackServiceClient : System.ServiceModel.ClientBase<TestClient.WorkTrackServiceReference.IWorkTrackService>, TestClient.WorkTrackServiceReference.IWorkTrackService {
        
        public WorkTrackServiceClient() {
        }
        
        public WorkTrackServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WorkTrackServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WorkTrackServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WorkTrackServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TestClient.WorkTrackServiceReference.Project[] GetProjects() {
            return base.Channel.GetProjects();
        }
        
        public TestClient.WorkTrackServiceReference.Project GetProject(System.Guid id) {
            return base.Channel.GetProject(id);
        }
        
        public TestClient.WorkTrackServiceReference.Project CreateProject() {
            return base.Channel.CreateProject();
        }
        
        public void InsertProject(TestClient.WorkTrackServiceReference.Project project) {
            base.Channel.InsertProject(project);
        }
        
        public void UpdateProject(TestClient.WorkTrackServiceReference.Project updatedProject, TestClient.WorkTrackServiceReference.Project originalProject) {
            base.Channel.UpdateProject(updatedProject, originalProject);
        }
    }
}
